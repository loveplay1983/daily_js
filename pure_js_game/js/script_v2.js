// JavaScript code goes here
//
// Initialize the canvas
////////////////////////////////////////////////////////////////////////////////////////////////////
var canvas = document.getElementById('myCanvas');
// The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.
var ctx = canvas.getContext('2d');
///////////////////////////////////////////////////////////////////////////////////////////////////


// initialize the ball bouncing
///////////////////////////////////////////////////////////////////////////////////////////////////
var x = canvas.width / 2;
var y = canvas.height - 30;
var ballRadius = 10;
var dx = 2;
var dy = -2;
///////////////////////////////////////////////////////////////////////////////////////////////////

// set up paddle - the paddle is used to bouncing the ball
///////////////////////////////////////////////////////////////////////////////////////////////////
var paddleHeight = 10;
var paddleWidth = 75;
var paddleX = (canvas.width - paddleWidth) / 2;
///////////////////////////////////////////////////////////////////////////////////////////////////

// is key pressed?
///////////////////////////////////////////////////////////////////////////////////////////////////
var leftPressed = false;
var rightPressed = false;
///////////////////////////////////////////////////////////////////////////////////////////////////

// key press event listening
///////////////////////////////////////////////////////////////////////////////////////////////////
document.addEventListener('keydown', keyDownHandler(e) {
  if (e.keyCode === 39) {
    rightPressed = true;
  } else if (e.keyCode === 37) {
    leftPressed = true;
  }
}, false);

document.addEventListener('keyup', keyUpHandler(e) {
  if (e.keyCode === 39) {
    rightPressed = false;
  } else if (e.keyCode === 37) {
    leftPressed = false;
  }
}, false);

function paddleBoundary() {
  if (rightPressed && paddleX < canvas.width - paddleWidth) {
    paddleX += 7;
  } else if (leftPressed && paddleX > 0) {
    paddleX -= 7;
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////

// collision detection
///////////////////////////////////////////////////////////////////////////////////////////////////
function edgeDetect() {
  if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
    dx = -dx;
  }
  if (y + dy > canvas.height - ballRadius || y + dy < ballRadius) {
    dy = -dy;
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////

// draw the ball
///////////////////////////////////////////////////////////////////////////////////////////////////
function drawBall() {
  ctx.beginPath();
  ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
  ctx.fillStyle = "#0095DD";
  ctx.fill();
  ctx.closePath();
}
///////////////////////////////////////////////////////////////////////////////////////////////////

// draw paddle
///////////////////////////////////////////////////////////////////////////////////////////////////
function drawPaddle() {
  ctx.beginPath();
  ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
  ctx.fillStyle = '#0095DD';
  ctx.fill();
  ftx.closePath();
}
///////////////////////////////////////////////////////////////////////////////////////////////////

// clear the ball trace while drawing the ball
///////////////////////////////////////////////////////////////////////////////////////////////////
function draw() {
  // The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content.
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  // drawing ball
  drawBall();
  edgeDetect();
  // add or sub x and y 2 pixel each time the draw() is done
  x += dx;
  y += dy;

  paddleBoundary();
  drawPaddle();
}
///////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////
setInterval(draw, 10);
